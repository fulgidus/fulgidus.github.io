---
import LanguageFlag from "./LanguageFlag.vue";
import TagsList from "./TagsList.vue";
import { Image } from "astro:assets";
import {
  getDate,
  getHref,
  getTarget,
  type DateStringNumber,
} from "@/utils/posts";
import type { CollectionPost } from "@/types";
import { defaultLang, getLangLabel, ui } from "@/i18n/ui";
import {
  getLangFromUrl,
  useTranslatedPath,
//   useTranslations,
} from "@/i18n/utils";

// temp TODO remove export
export interface Props {
  list: CollectionPost[];
  lang: keyof typeof ui;
}

const { list = [], lang } = Astro.props;

function purgePostsFromUnlisted(l: CollectionPost[]) {
  const sorted = l.reduce((acc, element) => {
    if (element.data.unlisted) {
      return [element, ...acc];
    }
    return [...acc, element];
  }, [] as CollectionPost[]);

  return sorted;
}

function isSameYear(a: DateStringNumber, b: DateStringNumber) {
  return a && b && getYear(a) === getYear(b);
}

function getYear(date: DateStringNumber) {
  return new Date(date).getFullYear();
}

function composeImageSizeClasses(post: CollectionPost): string {
  const { imageSize: size } = post.data;
  if (size === "xl") {
    return "max-w-100%";
  }
  if (size === "lg") {
    return "max-w-60% sm-max-w-60%";
  }
  if (size === "md") {
    return "max-w-24 sm-max-w-48";
  }
  if (size === "sm") {
    return "max-w-18 sm-max-w-36";
  }
  if (size === "xs") {
    return "max-w-12 m-1 sm-max-w-18";
  }
  return "max-w-24 sm-max-w-48";
}
const currentLang = getLangFromUrl(Astro.url.pathname);
// Dynamically iconstruct languages array based on available translations
// const availableLanguages = Object.keys(ui) as (keyof typeof ui)[];
// const languages = availableLanguages.map((lang) => [lang, ui[lang].language]);
// const t = useTranslations(currentLang as keyof typeof ui);
const tp = useTranslatedPath(currentLang as keyof typeof ui);
---

<ul sm:min-h-38 min-h-28 mb-18>
  {(!list || list.length === 0) && <div my-12>nothing here yet.</div>}
  {
    purgePostsFromUnlisted(list).map((post, index) => (
      <li class="mb-8">
        {!isSameYear(
          post.data.pubDate,
          list[index - 1]?.data.pubDate ?? NaN
        ) && (
          <div class="select-none relative h18 pointer-events-none">
            <span class="text-7em color-transparent font-bold text-stroke-2 text-stroke-hex-aaa op14 absolute top--0.2em font-title">
              {getYear(post.data.pubDate)}
            </span>
            {currentLang !== defaultLang && (
              <div class="translate-y-5rem translate-x-50% rotate-90 absolute top-0.8em right-0 w-10 h-7rem overflow-show">
                <span class="text-5rem color-transparent font-bold text-stroke-2 text-stroke-hex-aaa op14 absolute top-10 font-title text-nowrap">
                  <LanguageFlag {lang} verbose={false} />
                  {` ${getLangLabel(lang)}`}
                </span>
              </div>
            )}
          </div>
        )}
        <a
          class="text-lg lh-tight nav-link p-3 b-rd-2 flex flex-col flex-gap-2"
          aria-label={post.data.title}
          target={getTarget(post)}
          href={tp(getHref(post))}
          data-astro-prefetch
        >
          <div class="flex flex-col md:flex-row flex-gap-2 md:flex-items-center">
            <div class="flex flex-gap-2 flex-items-center text-wrap">
              <span lh-normal>
                {post.data.draft && (
                  <i
                    text-red-700
                    vertical-mid
                    aria-label="Draft"
                    i-ri-draft-line
                  />
                )}
                {post.data.tags?.includes("made-with-ai") && (
                  <i
                    text-violet-600
                    vertical-mid
                    aria-label="Made with AI"
                    i-ri-bard-line
                  />
                )}
                {post.data.title}
              </span>
            </div>
          </div>
          <div class="flex flex-col md:flex-row flex-gap-2 md:flex-items-center">
            <div class="opacity-50 text-sm flex flex-gap-1 flex-wrap">
              {post.data.redirect && <i text-base i-ri-external-link-line />}
              {post.data.video && <i text-base i-ri:film-line />}
              {post.data.pubDate && (
                <time datetime={getDate(post.data.pubDate)}>
                  {`${post.data.pubDate}`.split(",")[0]}
                </time>
              )}
              {post.data.duration && <span>· {post.data.duration}</span>}
              <TagsList tags={post.data.tags} link={false} verbose={false} />
              {post.data.lang && "· "}
              {post.data.lang && (
                <LanguageFlag lang={post.data.lang} verbose={false} />
              )}
            </div>
          </div>
          <div text-sm>
            {post.data.image !== undefined && (
              <Image
                src={post.data.image}
                alt={post.data.imageAlt ?? null}
                class={`${index % 2 === 0 ? "float-left mr-4" : "float-right ml-4"} mb-4 opacity-100 object-cover aspect-ratio-square ${composeImageSizeClasses(post)}`}
                format="webp"
              />
            )}
            <span>{post.data.description}</span>
          </div>
        </a>
      </li>
    ))
  }
</ul>
