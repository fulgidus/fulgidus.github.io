---
import type { HTMLTag, Polymorphic } from "astro/types";

import { getLangFromUrl, translateFrom } from "@/i18n/utils";
import { Languages, TranslationKeys } from "@/i18n/ui";
// Dynamically construct languages array based on available translations
// const availableLanguages = Object.keys(ui) as (Languages)[];
// const languages = availableLanguages.map((lang) => [lang, ui[lang].language]);
// const t = useTranslations(currentLang as Languages);
// const tp = useTranslatedPath(currentLang as Languages);

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  key: TranslationKeys;
  lang?: Languages;
};

const currentLang = getLangFromUrl("/it/blogss");
const { key, lang = currentLang, ...props }: Props<"span"> = Astro.props;

console.log("Received key:", key); // Add this line
---

<span {...props}>
  {
    !key ? (
      <>#key not provided#</>
    ) : (
      <>
        {translateFrom(lang, key)}
      </>
    )
  }
</span>
